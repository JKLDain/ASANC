import scipy.io.wavfile sample_rate, signal = scipy.io.wavfile.read('docs_feature_extraction_example.wav') 
signal = signal[0:int(3.5 * sample_rate)] 
import numpy as np 
pre_emphasis = 0.97 
emphasized_signal = np.append(signal[0], signal[1:] - pre_emphasis * signal[:-1]) 
frame_size = 0.025 
frame_stride = 0.01
frame_length, frame_step = frame_size * sample_rate, frame_stride * sample_rate 
signal_length = len(emphasized_signal) 
frame_length = int(round(frame_length)) 
frame_step = int(round(frame_step)) 
num_frames = int(np.ceil(float(np.abs(signal_length - frame_length)) / frame_step)) 
pad_signal_length = num_frames * frame_step + frame_length z = np.zeros((pad_signal_length - signal_length)) 
pad_signal = np.append(emphasized_signal, z) 
indices = np.tile(np.arange(0, frame_length), (num_frames, 1)) + np.tile(np.arange(0, num_frames * frame_step, frame_step), (frame_length, 1)).T 
frames = pad_signal[indices.astype(np.int32, copy=False)] 
frames = np.array([0.54 - 0.46 * np.cos((2 * np.pi * n) / (frame_length - 1)) for n in range(frame_length)]) 
NFFT = 512 dft_frames = np.fft.rfft(frames, NFFT) 
mag_frames = np.absolute(dft_frames) 
pow_frames = ((1.0 / NFFT) * ((mag_frames) ** 2)) 
nfilt = 40 low_freq_mel = 0 
high_freq_mel = (2595 * np.log10(1 + (sample_rate / 2) / 700)) 
# Convert Hz to Mel 
mel_points = np.linspace(low_freq_mel, high_freq_mel, nfilt + 2) 
# Equally spaced in Mel scale 
hz_points = (700 * (10*(mel_points / 2595) - 1)) 
# Convert Mel to Hz 
bin = np.floor((NFFT + 1) * hz_points / sample_rate)

fbank = np.zeros((nfilt, int(np.floor(NFFT / 2 + 1)))) for m in range(1, nfilt + 1): f_m_minus = int(bin[m - 1]) 
# left f_m = int(bin[m]) 
# center f_m_plus = int(bin[m + 1]) 
# right for k in range(f_m_minus, f_m): fbank[m - 1, k] = (k - bin[m - 1]) / (bin[m] - bin[m - 1]) for k in range(f_m, f_m_plus): fbank[m - 1, k] = (bin[m + 1] - k) / (bin[m + 1] - bin[m]) filter_banks = np.dot(pow_frames, fbank.T) filter_banks = np.where(filter_banks == 0, np.finfo(float).eps, filter_banks) filter_banks = 20 * np.log10(filter_banks) from scipy.fftpack import dct num_ceps = 12 mfcc = dct(filter_banks, type=2, axis=1, norm='ortho')[:, 1 : (num_ceps + 1)] (nframes, ncoeff) = mfcc.shape cep_lifter = 22 n = np.arange(ncoeff) lift = 1 + (cep_lifter / 2) * np.sin(np.pi * n / cep_lifter) mfcc *= lift filter_banks -= (np.mean(filter_banks, axis=0) + 1e-8)
